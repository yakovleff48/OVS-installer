#!/bin/bash

# Secure OpenVPN server installer and configurator for Debian and Ubuntu
# https://github.com/yakovleff48/OVS-installer

function isRoot () {
	if [ "$EUID" -ne 0 ]; then
		return 1
	fi
}

function tunAvailable () {
	if [ ! -e /dev/net/tun ]; then
		return 1
	fi
}

function checkOS () {
	if [[ -e /etc/debian_version ]]; then
		OS="debian"
		# shellcheck disable=SC1091
		source /etc/os-release

		if [[ "$ID" == "debian" || "$ID" == "raspbian" ]]; then
			if [[ ! $VERSION_ID =~ (8|9|10) ]]; then
				echo "⚠️ Ваша версия Debian не поддерживается."
				echo ""
				echo "Однако, если вы используете Debian > = 9 или unstable / testing, можете продолжить."
				echo "Имейте в виду, что они не поддерживаются, хотя..."
				echo ""
				until [[ $CONTINUE =~ (y|n) ]]; do
					read -rp "Continue? [y/n]: " -e CONTINUE
				done
				if [[ "$CONTINUE" == "n" ]]; then
					exit 1
				fi
			fi
		elif [[ "$ID" == "ubuntu" ]];then
			OS="ubuntu"
			if [[ ! $VERSION_ID =~ (16.04|18.04|19.04) ]]; then
				echo "⚠️ Ваша версия Ubuntu не поддерживается."
				echo ""
				echo "Однако, если вы используете Ubuntu > 17 или beta, можете продолжить."
				echo "Имейте в виду, что они не поддерживаются, хотя...."
				echo ""
				until [[ $CONTINUE =~ (y|n) ]]; do
					read -rp "Продолжить? [y/n]: " -e CONTINUE
				done
				if [[ "$CONTINUE" == "n" ]]; then
					exit 1
				fi
			fi
		fi
	else
		echo "Похоже, вы запускаете этот установщик на системе отличной от Debian и Ubuntu, так что..."
		exit 1
	fi
}

function initialCheck () {
	if ! isRoot; then
		echo "Извините, вам нужно запустить этот скрипт из под root"
		exit 1
	fi
	if ! tunAvailable; then
		echo "TUN недоступен"
		exit 1
	fi
	checkOS
}
function installQuestions () {
	echo "Добро пожаловать в установщик OpenVPN!"
	echo "Оригинал скрипта доступен по адресу: https://github.com/angristan/openvpn-install"
	echo ""

	echo "Необходимо ответить на несколько вопросов перед началом установки."
	echo "Вы можете оставить параметры по умолчанию и просто нажать Enter, если вы согласны с ними."
	echo ""
	echo "Нужно знать IPv4-адрес сетевого интерфейса, который будет слушать OpenVPN."
	echo "Если ваш сервер не находится за NAT, это должен быть ваш публичный IPv4-адрес."

	# Detect public IPv4 address and pre-fill for the user
	IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
	APPROVE_IP=${APPROVE_IP:-n}
	if [[ $APPROVE_IP =~ n ]]; then
		read -rp "IP address: " -e -i "$IP" IP
	fi
	# If $IP is a private IP address, the server must be behind NAT
	if echo "$IP" | grep -qE '^(10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.|192\.168)'; then
		echo ""
		echo "Кажется, этот сервер находится за NAT. Какой у него внешний (публичный) IPv4-адрес или имя хоста?"
		echo "По этому адресу клиенты будут подключаться к серверу."
		until [[ "$ENDPOINT" != "" ]]; do
			read -rp "Укажите публичный IPv4-адрес или внешнее имя хоста: " -e ENDPOINT
		done
	fi

	echo ""
	echo "Проверка подключения IPv6..."
	echo ""
	# "ping6" and "ping -6" availability varies depending on the distribution
	if type ping6 > /dev/null 2>&1; then
		PING6="ping6 -c3 ipv6.google.com > /dev/null 2>&1"
	else
		PING6="ping -6 -c3 ipv6.google.com > /dev/null 2>&1"
	fi
	if eval "$PING6"; then
		echo "Похоже, ваш хост имеет IPv6-соединение."
		SUGGESTION="y"
	else
		echo "У вашего хоста нет IPv6-соединение."
		SUGGESTION="n"
	fi
	echo ""
	# Ask the user if they want to enable IPv6 regardless its availability.
	until [[ $IPV6_SUPPORT =~ (y|n) ]]; do
		read -rp "Вы хотите включить поддержку IPv6 (NAT)? [y/n]: " -e -i $SUGGESTION IPV6_SUPPORT
	done
	echo ""
	echo "По какому порт будет происходить подключение к OpenVPN серверу?"
	echo "   1) Default: 1194"
	echo "   2) Custom"
	echo "   3) Random [49152-65535]"
	until [[ "$PORT_CHOICE" =~ ^[1-3]$ ]]; do
		read -rp "Сделайте выбор [1-3]: " -e -i 1 PORT_CHOICE
	done
	case $PORT_CHOICE in
		1)
			PORT="1194"
		;;
		2)
			until [[ "$PORT" =~ ^[0-9]+$ ]] && [ "$PORT" -ge 1 ] && [ "$PORT" -le 65535 ]; do
				read -rp "Custom port [1-65535]: " -e -i 1194 PORT
			done
		;;
		3)
			# Generate random number within private ports range
			PORT=$(shuf -i49152-65535 -n1)
			echo "Random Port: $PORT"
		;;
	esac
	echo ""
	echo "По какому протокол будет происходить подключение к OpenVPN?"
	echo "UDP быстрее. Но если по какой-то причине он не доступен, вы можете использовать TCP."
	echo "   1) UDP"
	echo "   2) TCP"
	until [[ "$PROTOCOL_CHOICE" =~ ^[1-2]$ ]]; do
		read -rp "Protocol [1-2]: " -e -i 1 PROTOCOL_CHOICE
	done
	case $PROTOCOL_CHOICE in
		1)
			PROTOCOL="udp"
		;;
		2)
			PROTOCOL="tcp"
		;;
	esac
	echo ""
	echo "Какие DNS сервера Вы хотите использовать с VPN?"
	echo "   1) Current system resolvers (from /etc/resolv.conf)"
#	echo "   2) Self-hosted DNS Resolver (Unbound)"
	echo "   3) Cloudflare (Anycast: worldwide)"
	echo "   4) Quad9 (Anycast: worldwide)"
	echo "   5) Quad9 uncensored (Anycast: worldwide)"
	echo "   6) FDN (France)"
	echo "   7) DNS.WATCH (Germany)"
	echo "   8) OpenDNS (Anycast: worldwide)"
	echo "   9) Google (Anycast: worldwide)"
	echo "   10) Yandex Basic (Russia)"
	echo "   11) AdGuard DNS (Anycast: worldwide)"
	echo "   12) NextDNS (Anycast: worldwide)"
	echo "   13) Custom"
	until [[ "$DNS" =~ ^[0-9]+$ ]] && [ "$DNS" -ge 1 ] && [ "$DNS" -le 13 ]; do
		read -rp "DNS [1-12]: " -e -i 3 DNS
		if [[ $DNS == "13" ]]; then
				until [[ "$DNS1" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; do
					read -rp "Primary DNS: " -e DNS1
				done
				until [[ "$DNS2" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; do
					read -rp "Secondary DNS (optional): " -e DNS2
					if [[ "$DNS2" == "" ]]; then
						break
					fi
				done
		fi
	done
	echo ""
	echo "Вы хотите использовать сжатие? Это не рекомендуется, поскольку атака VORACLE использует его."
	until [[ $COMPRESSION_ENABLED =~ (y|n) ]]; do
		read -rp"Enable compression? [y/n]: " -e -i n COMPRESSION_ENABLED
	done
	if [[ $COMPRESSION_ENABLED == "y" ]];then
		echo "Выберите, какой алгоритм сжатия вы хотите использовать: (они упорядочены по эффективности)"
		echo "   1) LZ4-v2"
		echo "   2) LZ4"
		echo "   3) LZ0"
		until [[ $COMPRESSION_CHOICE =~ ^[1-3]$ ]]; do
			read -rp"Сделайте выбор алгоритма [1-3]: " -e -i 1 COMPRESSION_CHOICE
		done
		case $COMPRESSION_CHOICE in
			1)
			COMPRESSION_ALG="lz4-v2"
			;;
			2)
			COMPRESSION_ALG="lz4"
			;;
			3)
			COMPRESSION_ALG="lzo"
			;;
		esac
	fi
	echo ""
	echo "Вы хотите настроить параметры шифрования?"
	echo "Если вы не знаете, что делаете, вам следует придерживаться параметров по умолчанию, предоставленных сценарием."
	echo "Обратите внимание, что, чтобы вы ни выбрали, все варианты, представленные в сценарии, безопасны. (В отличие от настроек по умолчанию OpenVPN)"
	echo "Пройдите по ссылку: https://github.com/angristan/openvpn-install#security-and-encryption и убедитесь лично."
	echo ""
	until [[ $CUSTOMIZE_ENC =~ (y|n) ]]; do
		read -rp "Customize encryption settings? [y/n]: " -e -i n CUSTOMIZE_ENC
	done
	if [[ $CUSTOMIZE_ENC == "n" ]];then
		# Use default, sane and fast parameters
		CIPHER="AES-128-GCM"
		CERT_TYPE="1" # ECDSA
		CERT_CURVE="prime256v1"
		CC_CIPHER="TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256"
		DH_TYPE="1" # ECDH
		DH_CURVE="prime256v1"
		HMAC_ALG="SHA256"
		TLS_SIG="1" # tls-crypt
	else
		echo ""
		echo "Выберите, какой шифр вы хотите использовать для канала данных:"
		echo "   1) AES-128-GCM (recommended)"
		echo "   2) AES-192-GCM"
		echo "   3) AES-256-GCM"
		echo "   4) AES-128-CBC"
		echo "   5) AES-192-CBC"
		echo "   6) AES-256-CBC"
		until [[ "$CIPHER_CHOICE" =~ ^[1-6]$ ]]; do
			read -rp "Сделайте выбор [1-6]: " -e -i 1 CIPHER_CHOICE
		done
		case $CIPHER_CHOICE in
			1)
				CIPHER="AES-128-GCM"
			;;
			2)
				CIPHER="AES-192-GCM"
			;;
			3)
				CIPHER="AES-256-GCM"
			;;
			4)
				CIPHER="AES-128-CBC"
			;;
			5)
				CIPHER="AES-192-CBC"
			;;
			6)
				CIPHER="AES-256-CBC"
			;;
		esac
		echo ""
		echo "Укажите какой сертификат вы хотите использовать:"
		echo "   1) ECDSA (recommended)"
		echo "   2) RSA"
		until [[ $CERT_TYPE =~ ^[1-2]$ ]]; do
			read -rp"Тип ключа сертификата [1-2]: " -e -i 1 CERT_TYPE
		done
		case $CERT_TYPE in
			1)
				echo ""
				echo "Выберите, какую кривую вы хотите использовать для ключа сертификата:"
				echo "   1) prime256v1 (recommended)"
				echo "   2) secp384r1"
				echo "   3) secp521r1"
				until [[ $CERT_CURVE_CHOICE =~ ^[1-3]$ ]]; do
					read -rp"Curve [1-3]: " -e -i 1 CERT_CURVE_CHOICE
				done
				case $CERT_CURVE_CHOICE in
					1)
						CERT_CURVE="prime256v1"
					;;
					2)
						CERT_CURVE="secp384r1"
					;;
					3)
						CERT_CURVE="secp521r1"
					;;
				esac
			;;
			2)
				echo ""
				echo "Выберите, какую размерность ключа Вы хотите использовать RSA сертификата:"
				echo "   1) 2048 bits (recommended)"
				echo "   2) 3072 bits"
				echo "   3) 4096 bits"
				until [[ "$RSA_KEY_SIZE_CHOICE" =~ ^[1-3]$ ]]; do
					read -rp "Размерность ключа RSA [1-3]: " -e -i 1 RSA_KEY_SIZE_CHOICE
				done
				case $RSA_KEY_SIZE_CHOICE in
					1)
						RSA_KEY_SIZE="2048"
					;;
					2)
						RSA_KEY_SIZE="3072"
					;;
					3)
						RSA_KEY_SIZE="4096"
					;;
				esac
			;;
		esac
		echo ""
		echo "Выберите, какой шифр вы хотите использовать для канала управления:"
		case $CERT_TYPE in
			1)
				echo "   1) ECDHE-ECDSA-AES-128-GCM-SHA256 (recommended)"
				echo "   2) ECDHE-ECDSA-AES-256-GCM-SHA384"
				until [[ $CC_CIPHER_CHOICE =~ ^[1-2]$ ]]; do
					read -rp"Шифр канала управления [1-2]: " -e -i 1 CC_CIPHER_CHOICE
				done
				case $CC_CIPHER_CHOICE in
					1)
						CC_CIPHER="TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256"
					;;
					2)
						CC_CIPHER="TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384"
					;;
				esac
			;;
			2)
				echo "   1) ECDHE-RSA-AES-128-GCM-SHA256 (recommended)"
				echo "   2) ECDHE-RSA-AES-256-GCM-SHA384"
				until [[ $CC_CIPHER_CHOICE =~ ^[1-2]$ ]]; do
					read -rp"Шифр канала управления [1-2]: " -e -i 1 CC_CIPHER_CHOICE
				done
				case $CC_CIPHER_CHOICE in
					1)
						CC_CIPHER="TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256"
					;;
					2)
						CC_CIPHER="TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384"
					;;
				esac
			;;
		esac
		echo ""
		echo "Выберите, какой ключ Диффи-Хеллмана вы хотите использовать:"
		echo "   1) ECDH (recommended)"
		echo "   2) DH"
		until [[ $DH_TYPE =~ [1-2] ]]; do
			read -rp"Тип ключа Диффи-Хеллмана [1-2]: " -e -i 1 DH_TYPE
		done
		case $DH_TYPE in
			1)
				echo ""
				echo "Выберите, какую кривую вы хотите использовать для ключа ECDH:"
				echo "   1) prime256v1 (recommended)"
				echo "   2) secp384r1"
				echo "   3) secp521r1"
				while [[ $DH_CURVE_CHOICE != "1" && $DH_CURVE_CHOICE != "2" && $DH_CURVE_CHOICE != "3" ]]; do
					read -rp"Кривай ключа ECDH [1-3]: " -e -i 1 DH_CURVE_CHOICE
				done
				case $DH_CURVE_CHOICE in
					1)
						DH_CURVE="prime256v1"
					;;
					2)
						DH_CURVE="secp384r1"
					;;
					3)
						DH_CURVE="secp521r1"
					;;
				esac
			;;
			2)
				echo ""
				echo "Выберите, какую размерность ключа Диффи-Хеллмана вы хотите использовать:"
				echo "   1) 2048 bits (recommended)"
				echo "   2) 3072 bits"
				echo "   3) 4096 bits"
				until [[ "$DH_KEY_SIZE_CHOICE" =~ ^[1-3]$ ]]; do
					read -rp "Размерность ключа Диффи-Хеллмана [1-3]: " -e -i 1 DH_KEY_SIZE_CHOICE
				done
				case $DH_KEY_SIZE_CHOICE in
					1)
						DH_KEY_SIZE="2048"
					;;
					2)
						DH_KEY_SIZE="3072"
					;;
					3)
						DH_KEY_SIZE="4096"
					;;
				esac
			;;
		esac
		echo ""
		# The "auth" options behaves differently with AEAD ciphers
		if [[ "$CIPHER" =~ CBC$ ]]; then
			echo "Алгоритм дайджеста аутентифицирует пакеты канала данных и пакеты tls-auth из канала управления."
		elif [[ "$CIPHER" =~ GCM$ ]]; then
			echo "Алгоритм дайджеста аутентифицирует пакеты tls-auth из канала управления."
		fi
		echo "Какой алгоритм дайджеста вы хотите использовать для HMAC?"
		echo "   1) SHA-256 (recommended)"
		echo "   2) SHA-384"
		echo "   3) SHA-512"
		until [[ $HMAC_ALG_CHOICE =~ ^[1-3]$ ]]; do
			read -rp "Алгоритм дайджеста [1-3]: " -e -i 1 HMAC_ALG_CHOICE
		done
		case $HMAC_ALG_CHOICE in
			1)
				HMAC_ALG="SHA256"
			;;
			2)
				HMAC_ALG="SHA384"
			;;
			3)
				HMAC_ALG="SHA512"
			;;
		esac
		echo ""
		echo "Вы можете добавить дополнительный уровень безопасности в канал управления с помощью tls-auth и tls-crypt"
		echo "tls-auth аутентифицирует пакеты, а tls-crypt аутентифицирует и шифрует их."
		echo "   1) tls-crypt (recommended)"
		echo "   2) tls-auth"
		until [[ $TLS_SIG =~ [1-2] ]]; do
				read -rp "Канал управления дополнительным механизмом безопасности [1-2]: " -e -i 1 TLS_SIG
		done
	fi
	echo ""
	echo "Хорошо, на все необходимые вопросы получены ответы. Ваш сервер OpenVPN будет настроен и это произойдет...СЕЙЧАС!"
	echo "В конце установки, Вы можете сгенерировать клиента(ов)."
	APPROVE_INSTALL=${APPROVE_INSTALL:-n}
	if [[ $APPROVE_INSTALL =~ n ]]; then
		read -n1 -r -p "Press any key to continue..."
	fi
}

function installOpenVPN () {
	if [[ $AUTO_INSTALL == "y" ]]; then
		# Set default choices so that no questions will be asked.
		APPROVE_INSTALL=${APPROVE_INSTALL:-y}
		APPROVE_IP=${APPROVE_IP:-y}
		IPV6_SUPPORT=${IPV6_SUPPORT:-n}
		PORT_CHOICE=${PORT_CHOICE:-1}
		PROTOCOL_CHOICE=${PROTOCOL_CHOICE:-1}
		DNS=${DNS:-1}
		COMPRESSION_ENABLED=${COMPRESSION_ENABLED:-n}
		CUSTOMIZE_ENC=${CUSTOMIZE_ENC:-n}
		CLIENT=${CLIENT:-client}
		PASS=${PASS:-1}
		CONTINUE=${CONTINUE:-y}

		# Behind NAT, we'll default to the publicly reachable IPv4.
		PUBLIC_IPV4=$(curl ifconfig.co)
		ENDPOINT=${ENDPOINT:-$PUBLIC_IPV4}
	fi

	# Run setup questions first, and set other variales if auto-install
	installQuestions

	# Get the "public" interface from the default route
	NIC=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
	if [[ -z "$NIC" ]] && [[ "$IPV6_SUPPORT" == 'y' ]]; then
		NIC=$(ip -6 route show default | sed -ne 's/^default .* dev \([^ ]*\) .*$/\1/p')
	fi

	# $NIC can not be empty for script rm-openvpn-rules.sh
        if [[ -z "$NIC" ]]; then
                echo
                echo "Не удается обнаружить внешний интерфейс."
                echo "Это необходимо для настройки MASQUERADE."
                until [[ $CONTINUE =~ (y|n) ]]; do
                        read -rp "Продолжить? [y/n]: " -e CONTINUE
                done
                if [[ "$CONTINUE" == "n" ]]; then
                        exit 1
                fi
        fi

	if [[ "$OS" =~ (debian|ubuntu) ]]; then
		apt-get update
		apt-get -y install ca-certificates gnupg git python-virtualenv geoip-database-extra sudo
		
         # We add the OpenVPN repo to get the latest version.
		if [[ "$VERSION_ID" == "8" ]]; then
			echo "deb http://build.openvpn.net/debian/openvpn/stable jessie main" > /etc/apt/sources.list.d/openvpn.list
			wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
			apt-get update
		fi
		if [[ "$VERSION_ID" == "16.04" ]]; then
			echo "deb http://build.openvpn.net/debian/openvpn/stable xenial main" > /etc/apt/sources.list.d/openvpn.list
			wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
			apt-get update
		fi
		# Ubuntu > 16.04 and Debian > 8 have OpenVPN >= 2.4 without the need of a third party repository.
		apt-get install -y openvpn iptables openssl wget ca-certificates curl
	elif [[ "$OS" == 'centos' ]]; then
		yum install -y epel-release
		yum install -y openvpn iptables openssl wget ca-certificates curl tar 'policycoreutils-python*'
	elif [[ "$OS" == 'amzn' ]]; then
		amazon-linux-extras install -y epel
		yum install -y openvpn iptables openssl wget ca-certificates curl
	elif [[ "$OS" == 'fedora' ]]; then
		dnf install -y openvpn iptables openssl wget ca-certificates curl
	elif [[ "$OS" == 'arch' ]]; then
		# Install required dependencies and upgrade the system
		pacman --needed --noconfirm -Syu openvpn iptables openssl wget ca-certificates curl
	fi

	#Add new user, for run scripts
	echo "Для запуска пользовательски скриптов будет создана сиcтемная учетная запись ovuser"
    username=ovuser
 #   password=1234Abcd
if [ $(id -u) -eq 0 ]; then
#       read -p "Enter username : " username
        read -s -p "Задайте пароль для системного пользователя ovuser(символы при вводе не отображаются) : " password
        egrep "^$username" /etc/passwd >/dev/null
        if [ $? -eq 0 ]; then
                echo "$username exists!"
                exit 1
        else
                pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)
                useradd -m -p $pass $username
                [ $? -eq 0 ] && echo "User has been added to system!" || echo "Failed to add a user!"
        fi
else
        echo "Only root may add a user to the system"
        exit 2
fi
#add user in sudo
usermod -aG sudo ovuser
echo "ovuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
echo "User for run scripts add in SUDOERS file!"
 
#install openvpn-monitor
cd /srv/
git clone https://github.com/furlongm/openvpn-monitor.git
cd openvpn-monitor
virtualenv .
. bin/activate
pip install --upgrade pip
pip install openvpn-monitor gunicorn

   # Find out if the machine uses nogroup or nobody for the permissionless group
	if grep -qs "^nogroup:" /etc/group; then
		NOGROUP=nogroup
	else
		NOGROUP=nobody
	fi

	# An old version of easy-rsa was available by default in some openvpn packages
	if [[ -d /etc/openvpn/easy-rsa/ ]]; then
		rm -rf /etc/openvpn/easy-rsa/
	fi

	# Install the latest version of easy-rsa from source
	local version="3.0.6"
	wget -O ~/EasyRSA-unix-v${version}.tgz https://github.com/OpenVPN/easy-rsa/releases/download/v${version}/EasyRSA-unix-v${version}.tgz
	tar xzf ~/EasyRSA-unix-v${version}.tgz -C ~/
	mv ~/EasyRSA-v${version} /etc/openvpn/easy-rsa
	chown -R root:root /etc/openvpn/easy-rsa/
	rm -f ~/EasyRSA-unix-v${version}.tgz

	cd /etc/openvpn/easy-rsa/ || return
	case $CERT_TYPE in
		1)
			echo "set_var EASYRSA_ALGO ec" > vars
			echo "set_var EASYRSA_CURVE $CERT_CURVE" >> vars
		;;
		2)
			echo "set_var EASYRSA_KEY_SIZE $RSA_KEY_SIZE" > vars
		;;
	esac

	# Generate a random, alphanumeric identifier of 16 characters for CN and one for server name
	SERVER_CN="cn_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
	SERVER_NAME="server_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
	echo "set_var EASYRSA_REQ_CN $SERVER_CN" >> vars

	# Create the PKI, set up the CA, the DH params and the server certificate
	./easyrsa init-pki

        # Workaround to remove unharmful error until easy-rsa 3.0.7
        # https://github.com/OpenVPN/easy-rsa/issues/261
        sed -i 's/^RANDFILE/#RANDFILE/g' pki/openssl-easyrsa.cnf

	./easyrsa --batch build-ca nopass

	if [[ $DH_TYPE == "2" ]]; then
		# ECDH keys are generated on-the-fly so we don't need to generate them beforehand
		openssl dhparam -out dh.pem $DH_KEY_SIZE
	fi

	./easyrsa build-server-full "$SERVER_NAME" nopass
	EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl

	case $TLS_SIG in
		1)
			# Generate tls-crypt key
			openvpn --genkey --secret /etc/openvpn/tls-crypt.key
		;;
		2)
			# Generate tls-auth key
			openvpn --genkey --secret /etc/openvpn/tls-auth.key
		;;
	esac

	# Move all the generated files
	cp pki/ca.crt pki/private/ca.key "pki/issued/$SERVER_NAME.crt" "pki/private/$SERVER_NAME.key" /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
	if [[ $DH_TYPE == "2" ]]; then
		cp dh.pem /etc/openvpn
	fi

	# Make cert revocation list readable for non-root
	chmod 644 /etc/openvpn/crl.pem

	# Generate server.conf
	echo "port $PORT" > /etc/openvpn/server.conf
	if [[ "$IPV6_SUPPORT" == 'n' ]]; then
		echo "proto $PROTOCOL" >> /etc/openvpn/server.conf
	elif [[ "$IPV6_SUPPORT" == 'y' ]]; then
		echo "proto ${PROTOCOL}6" >> /etc/openvpn/server.conf
	fi

	echo "dev tun
user ovuser
#group $NOGROUP
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" >> /etc/openvpn/server.conf

	# DNS resolvers
	case $DNS in
		1) # Current system resolvers
			# Locate the proper resolv.conf
			# Needed for systems running systemd-resolved
			if grep -q "127.0.0.53" "/etc/resolv.conf"; then
				RESOLVCONF='/run/systemd/resolve/resolv.conf'
			else
				RESOLVCONF='/etc/resolv.conf'
			fi
			# Obtain the resolvers from resolv.conf and use them for OpenVPN
			grep -v '#' $RESOLVCONF | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
				echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
			done
		;;
	#	2) # Self-hosted DNS resolver (Unbound)
	#		echo 'push "dhcp-option DNS 10.8.0.1"' >> /etc/openvpn/server.conf
	#	;;
		3) # Cloudflare
			echo 'push "dhcp-option DNS 1.0.0.1"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 1.1.1.1"' >> /etc/openvpn/server.conf
		;;
		4) # Quad9
			echo 'push "dhcp-option DNS 9.9.9.9"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 149.112.112.112"' >> /etc/openvpn/server.conf
		;;
		5) # Quad9 uncensored
			echo 'push "dhcp-option DNS 9.9.9.10"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 149.112.112.10"' >> /etc/openvpn/server.conf
		;;
		6) # FDN
			echo 'push "dhcp-option DNS 80.67.169.40"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 80.67.169.12"' >> /etc/openvpn/server.conf
		;;
		7) # DNS.WATCH
			echo 'push "dhcp-option DNS 84.200.69.80"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 84.200.70.40"' >> /etc/openvpn/server.conf
		;;
		8) # OpenDNS
			echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
		;;
		9) # Google
			echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		;;
		10) # Yandex Basic
			echo 'push "dhcp-option DNS 77.88.8.8"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 77.88.8.1"' >> /etc/openvpn/server.conf
		;;
		11) # AdGuard DNS
			echo 'push "dhcp-option DNS 176.103.130.130"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 176.103.130.131"' >> /etc/openvpn/server.conf
		;;
		12) # NextDNS
			echo 'push "dhcp-option DNS 45.90.28.167"' >> /etc/openvpn/server.conf
			echo 'push "dhcp-option DNS 45.90.30.167"' >> /etc/openvpn/server.conf
		;;
		13) # Custom DNS
		echo "push \"dhcp-option DNS $DNS1\"" >> /etc/openvpn/server.conf
		if [[ "$DNS2" != "" ]]; then
			echo "push \"dhcp-option DNS $DNS2\"" >> /etc/openvpn/server.conf
		fi
		;;
	esac
#	echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf

	# IPv6 network settings if needed
	if [[ "$IPV6_SUPPORT" == 'y' ]]; then
		echo 'server-ipv6 fd42:42:42:42::/112
tun-ipv6
push tun-ipv6
push "route-ipv6 2000::/3"
push "redirect-gateway ipv6"' >> /etc/openvpn/server.conf
	fi

	if [[ $COMPRESSION_ENABLED == "y"  ]]; then
		echo "compress $COMPRESSION_ALG" >> /etc/openvpn/server.conf
	fi

	if [[ $DH_TYPE == "1" ]]; then
		echo "dh none" >> /etc/openvpn/server.conf
		echo "ecdh-curve $DH_CURVE" >> /etc/openvpn/server.conf
	elif [[ $DH_TYPE == "2" ]]; then
		echo "dh dh.pem" >> /etc/openvpn/server.conf
	fi

	case $TLS_SIG in
		1)
			echo "tls-crypt tls-crypt.key 0" >> /etc/openvpn/server.conf
		;;
		2)
			echo "tls-auth tls-auth.key 0" >> /etc/openvpn/server.conf
		;;
	esac

	echo "crl-verify crl.pem
ca ca.crt
cert $SERVER_NAME.crt
key $SERVER_NAME.key
auth $HMAC_ALG
cipher $CIPHER
ncp-ciphers $CIPHER
tls-server
tls-version-min 1.2
tls-cipher $CC_CIPHER
status /var/log/openvpn/status.log
verb 3
client-config-dir ccd
# Client configuration
script-security 2
ccd-exclusive
client-connect     /etc/openvpn/scripts/ovpn_connect.sh
client-disconnect  /etc/openvpn/scripts/ovpn_disconnect.sh
#Monitor Configutation
management 127.0.0.1 5555" >> /etc/openvpn/server.conf
	# Create log dir
	mkdir -p /var/log/openvpn
    #Create client-config-dir ccd
	mkdir -p /etc/openvpn/ccd
    #Create dir for client scripts
    mkdir -p /etc/openvpn/scripts 
	# Enable routing
	echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.d/20-openvpn.conf
	if [[ "$IPV6_SUPPORT" == 'y' ]]; then
		echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.d/20-openvpn.conf
	fi
	# Apply sysctl rules
	sysctl --system

	# If SELinux is enabled and a custom port was selected, we need this
	if hash sestatus 2>/dev/null; then
		if sestatus | grep "Current mode" | grep -qs "enforcing"; then
			if [[ "$PORT" != '1194' ]]; then
				semanage port -a -t openvpn_port_t -p "$PROTOCOL" "$PORT"
			fi
		fi
	fi

	# Finally, restart and enable OpenVPN
	
	if [[ "$OS" == "ubuntu" ]] && [[ "$VERSION_ID" == "16.04" ]]; then
		# On Ubuntu 16.04, we use the package from the OpenVPN repo
		# This package uses a sysvinit service
		systemctl enable openvpn
		systemctl start openvpn
	else
		# Don't modify package-provided service
		cp /lib/systemd/system/openvpn\@.service /etc/systemd/system/openvpn\@.service

		# Workaround to fix OpenVPN service on OpenVZ
		sed -i 's|LimitNPROC|#LimitNPROC|' /etc/systemd/system/openvpn\@.service
		# Another workaround to keep using /etc/openvpn/
		sed -i 's|/etc/openvpn/server|/etc/openvpn|' /etc/systemd/system/openvpn\@.service

		systemctl daemon-reload
		systemctl enable openvpn@server
		systemctl restart openvpn@server
	fi
# Add iptables rules in two scripts
	mkdir -p /etc/iptables

# Script to add rules
	echo "#!/usr/bin/env bash

# Cleanup iptables
iptables -F
iptables -X
iptables -t raw -F
iptables -t raw -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t security -F
iptables -t security -X
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

iptables -I INPUT 1 -i lo -j ACCEPT
iptables -I INPUT 1 -i $NIC -p udp --dport $PORT -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -s 0.0.0.0/0 -j ACCEPT
iptables -A INPUT -p icmp -m state --state NEW -s 0.0.0.0/0 -j ACCEPT
iptables -A INPUT -p tcp --dport 8888 -m state --state NEW -s 0.0.0.0/0 -j ACCEPT
#iptables -I INPUT 1 -i $NIC -p udp --dport $PORT -j ACCEPT
iptables -I INPUT 1 -i $NIC -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -i tun+ -j ACCEPT

iptables -A OUTPUT -o tun+ -j ACCEPT
iptables -I OUTPUT 1 -o lo -j ACCEPT
iptables -I OUTPUT 1 -o $NIC -d 0.0.0.0/0 -j ACCEPT

iptables -I FORWARD 1 -m state --state RELATED,ESTABLISHED -j ACCEPT" > /etc/iptables/add-openvpn-rules.sh

	if [[ "$IPV6_SUPPORT" == 'y' ]]; then
		echo "ip6tables -t nat -I POSTROUTING 1 -s fd42:42:42:42::/112 -o $NIC -j MASQUERADE
ip6tables -I INPUT 1 -i tun0 -j ACCEPT
ip6tables -I FORWARD 1 -i $NIC -o tun0 -j ACCEPT
ip6tables -I FORWARD 1 -i tun0 -o $NIC -j ACCEPT" >> /etc/iptables/add-openvpn-rules.sh
	fi

	# Script to remove rules
	echo "iptables -D INPUT -i lo -j ACCEPT
iptables -D INPUT -i $NIC -p udp --dport $PORT -j ACCEPT
iptables -D INPUT -i $NIC -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -D INPUT -p tcp --dport 22 -m state --state NEW -s 0.0.0.0/0 -j ACCEPT
iptables -D INPUT -p icmp -m state --state NEW -s 0.0.0.0/0 -j ACCEPT
iptables -D INPUT -p tcp --dport 8888 -m state --state NEW -s 0.0.0.0/0 -j ACCEPT
iptables -D INPUT -i tun+ -j ACCEPT
iptables -D OUTPUT -o tun+ -j ACCEPT
iptables -D OUTPUT -o lo -j ACCEPT
iptables -D OUTPUT -o $NIC -d 0.0.0.0/0 -j ACCEPT

iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" > /etc/iptables/rm-openvpn-rules.sh

	if [[ "$IPV6_SUPPORT" == 'y' ]]; then
		echo "ip6tables -t nat -D POSTROUTING -s fd42:42:42:42::/112 -o $NIC -j MASQUERADE
ip6tables -D INPUT -i tun0 -j ACCEPT
ip6tables -D FORWARD -i $NIC -o tun0 -j ACCEPT
ip6tables -D FORWARD -i tun0 -o $NIC -j ACCEPT" >> /etc/iptables/rm-openvpn-rules.sh
	fi

	chmod +x /etc/iptables/add-openvpn-rules.sh
	chmod +x /etc/iptables/rm-openvpn-rules.sh

# Script to start openvpn-mon daemon
echo "
#!/bin/bash
cd /srv/openvpn-monitor
. bin/activate
gunicorn openvpn-monitor -b 0.0.0.0:8888 --name openvpn-monitor --daemon" > /srv/openvpn-monitor/start-ovpn-mon.sh

#Create file for logging connect-disconnect clients
#echo "#File for logging connect-disconnect clients" 
> /var/log/openvpn/remote.connect
chmod 777 /var/log/openvpn/remote.connect

# Script to stop openvpn-mon daemon
#echo "
#!/bin/bash
#pkill gunicorn" > /srv/openvpn-monitor/stop-ovpn-mon.sh

chmod +x /srv/openvpn-monitor/start-ovpn-mon.sh
chmod +x /srv/openvpn-monitor/stop-ovpn-mon.sh

# Script to add user iptables rules and open-mon
mv /tmp/ovpn_connect.sh /etc/openvpn/scripts/ovpn_connect.sh
mv /tmp/ovpn_disconnect.sh /etc/openvpn/scripts/ovpn_disconnect.sh
mv /tmp/openvpn-monitor.conf /srv/openvpn-monitor/openvpn-monitor.conf
mv /tmp/GeoLite2-City.mmdb /var/lib/GeoIP/GeoLite2-City.mmdb
chmod 755 /etc/openvpn/scripts/ovpn_connect.sh
chmod 755 /etc/openvpn/scripts/ovpn_disconnect.sh



	# Handle the rules via a systemd script
	echo "[Unit]
Description=iptables rules for OpenVPN
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/etc/iptables/add-openvpn-rules.sh
ExecStop=/etc/iptables/rm-openvpn-rules.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/iptables-openvpn.service

# Handle the rules rc.local for ovpn-mon
echo "#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
/srv/openvpn-monitor/start-ovpn-mon.sh

exit 0
" > /etc/rc.local

chmod +x /etc/rc.local

	# Enable service and apply rules
	systemctl daemon-reload
	systemctl enable iptables-openvpn
    systemctl enable rc-local
	systemctl start iptables-openvpn
    systemctl start rc-local.service

	# If the server is behind a NAT, use the correct IP address for the clients to connect to
	if [[ "$ENDPOINT" != "" ]]; then
		IP=$ENDPOINT
	fi

	# client-template.txt is created so we have a template to add further users later
	echo "client" > /etc/openvpn/client-template.txt
	if [[ "$PROTOCOL" == 'udp' ]]; then
		echo "proto udp" >> /etc/openvpn/client-template.txt
		echo "explicit-exit-notify" >> /etc/openvpn/client-template.txt
	elif [[ "$PROTOCOL" == 'tcp' ]]; then
		echo "proto tcp-client" >> /etc/openvpn/client-template.txt
	fi
	echo "remote $IP $PORT
dev tun
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name $SERVER_NAME name
auth $HMAC_ALG
auth-nocache
cipher $CIPHER
tls-client
tls-version-min 1.2
tls-cipher $CC_CIPHER
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3" >> /etc/openvpn/client-template.txt

if [[ $COMPRESSION_ENABLED == "y"  ]]; then
	echo "compress $COMPRESSION_ALG" >> /etc/openvpn/client-template.txt
fi

	# Generate the custom client.ovpn
	newClient
	echo "Если вы хотите добавить новых клиентов, вам просто нужно запустить этот скрипт еще раз!"
}

function inputSubnet() {

	until [[ "$USERSUBNET" != "" ]]; do
    echo ""
	echo "Укажите разрешенную подсеть для "$CLIENT"."
	echo "Можете указать как целую подсеть, например: 192.168.1.0 255.255.255.0, так и отдельный хост, например: 172.16.85.2 255.255.255.255"

			read -rp "Разрешенная подсеть для "$CLIENT": " -e USERSUBNET
done
echo "#Файл конфигурации доступных подсетей для данного клиента" >> /etc/openvpn/ccd/"$CLIENT"
echo "#формируется автоматически при создании нового пользователя," >> /etc/openvpn/ccd/"$CLIENT"
echo "#при редактировании данного файла указываем разрешенные подсети или отдельные хосты в виде:" >> /etc/openvpn/ccd/"$CLIENT"
echo "#подсеть: push \"route 172.16.85.0 255.255.255.0\"" >> /etc/openvpn/ccd/"$CLIENT"
echo "#отдельный хост: push \"route 172.16.85.2 255.255.255.255\"" >> /etc/openvpn/ccd/"$CLIENT"
echo "push \"route "$USERSUBNET"\"" >> /etc/openvpn/ccd/"$CLIENT"
chmod 644 /etc/openvpn/ccd/"$CLIENT"
until [[ $CONTINUE =~ (y|n) ]]; do
					read -rp "Добавить еще одну подсеть для "$CLIENT"? [y/n]: " -e CONTINUE
				done
if [[ $CONTINUE == "n" ]];then
echo ""
	echo "Клиент $CLIENT добавлен, файл конфигурации доступен по адресу $homeDir/$CLIENT.ovpn."
	echo "Скачайте файл .ovpn и импортируйте его в свой клиент OpenVPN."
exit 0
else		
unset USERSUBNET
unset CONTINUE
inputSubnet
fi
}

function newClient () {
	echo ""
	echo "Укажите имя нового клиента."
	echo "Имя должно содержать только латинские буквы и цифры, без спецсимволов."

	until [[ "$CLIENT" =~ ^[a-zA-Z0-9_]+$ ]]; do
		read -rp "Имя клиента: " -e CLIENT
	done

	echo ""
	echo "Вы хотите защитить файл конфигурации паролем?"
	echo "(т.е., зашифровать закрытый ключ с помощью пароля)"
	echo "   1) Добавить клиент без пароля"
	echo "   2) Используйте пароль для клиента"

	until [[ "$PASS" =~ ^[1-2]$ ]]; do
		read -rp "Сделайте выбор [1-2]: " -e -i 1 PASS
	done

	cd /etc/openvpn/easy-rsa/ || return
	case $PASS in
		1)
			./easyrsa build-client-full "$CLIENT" nopass
		;;
		2)
		echo "⚠️ Вам будет предложено ввести пароль клиента ниже ⚠️"
			./easyrsa build-client-full "$CLIENT"
		;;
	esac

	# Home directory of the user, where the client configuration (.ovpn) will be written
	if [ -e "/home/$CLIENT" ]; then  # if $1 is a user name
		homeDir="/home/$CLIENT"
	elif [ "${SUDO_USER}" ]; then # if not, use SUDO_USER
		homeDir="/home/${SUDO_USER}"
	else # if not SUDO_USER, use /root
		homeDir="/root"
	fi

	# Determine if we use tls-auth or tls-crypt
	if grep -qs "^tls-crypt" /etc/openvpn/server.conf; then
		TLS_SIG="1"
	elif grep -qs "^tls-auth" /etc/openvpn/server.conf; then
		TLS_SIG="2"
	fi

	# Generates the custom client.ovpn
	cp /etc/openvpn/client-template.txt "$homeDir/$CLIENT.ovpn"
	{
		echo "<ca>"
		cat "/etc/openvpn/easy-rsa/pki/ca.crt"
		echo "</ca>"

		echo "<cert>"
		awk '/BEGIN/,/END/' "/etc/openvpn/easy-rsa/pki/issued/$CLIENT.crt"
		echo "</cert>"

		echo "<key>"
		cat "/etc/openvpn/easy-rsa/pki/private/$CLIENT.key"
		echo "</key>"

		case $TLS_SIG in
			1)
				echo "<tls-crypt>"
				cat /etc/openvpn/tls-crypt.key
				echo "</tls-crypt>"
			;;
			2)
				echo "key-direction 1"
				echo "<tls-auth>"
				cat /etc/openvpn/tls-auth.key
				echo "</tls-auth>"
			;;
		esac
	} >> "$homeDir/$CLIENT.ovpn"
inputSubnet
}

function AddRemoveSubnetClient () {
	NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
	if [[ "$NUMBEROFCLIENTS" == '0' ]]; then
		echo ""
		echo "У Вас нет доступных клиентов!"
		exit 1
	fi

	echo ""
	echo "Выберите существующего клиента, доступ к подсетям которого вы хотите отредактировать"
	tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
	if [[ "$NUMBEROFCLIENTS" == '1' ]]; then
		read -rp "Выберите одного клиента [1]: " CLIENTNUMBER
	else
		read -rp "Выберите одного клиента [1-$NUMBEROFCLIENTS]: " CLIENTNUMBER
	fi

	CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)

nano "/etc/openvpn/ccd/$CLIENT"	
echo ""
	echo "Доступ к подсетям клиента $CLIENT отредактирован."
}

function ResetClient () {
	NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
	if [[ "$NUMBEROFCLIENTS" == '0' ]]; then
		echo ""
		echo "У Вас нет доступных клиентов!"
		exit 1
	fi

	echo ""
	echo "Выберите клиента сессию которого Вы хотите сбросить"
	tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
	if [[ "$NUMBEROFCLIENTS" == '1' ]]; then
		read -rp "Выберите одного клиента [1]: " CLIENTNUMBER
	else
		read -rp "Выберите одного клиента [1-$NUMBEROFCLIENTS]: " CLIENTNUMBER
	fi

	CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)
#сбросить сессию клиента
{ echo "kill $CLIENT"; sleep 1; } | telnet localhost 5555
echo ""
	echo "Сессия клиента $CLIENT сброшена."
}

function BlockClient () {
	NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
	if [[ "$NUMBEROFCLIENTS" == '0' ]]; then
		echo ""
		echo "У Вас нет доступных клиентов!"
		exit 1
	fi

	echo ""
	echo "Выберите клиента которого Вы хотите заблокировать"
	tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
	if [[ "$NUMBEROFCLIENTS" == '1' ]]; then
		read -rp "Выберите одного клиента [1]: " CLIENTNUMBER
	else
		read -rp "Выберите одного клиента [1-$NUMBEROFCLIENTS]: " CLIENTNUMBER
	fi

	CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)
#заблокировать пользователя
cp /etc/openvpn/ccd/$CLIENT /etc/openvpn/ccd/$CLIENT"_disabled"
echo 'disable' >/etc/openvpn/ccd/$CLIENT
#сбросить сессию клиента (если он подключен)
{ echo "kill $CLIENT"; sleep 1; } | telnet localhost 5555
echo ""
	echo "Клиент $CLIENT заблокирован."
}

function UnblockClient () {
	NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
	if [[ "$NUMBEROFCLIENTS" == '0' ]]; then
		echo ""
		echo "У Вас нет доступных клиентов!"
		exit 1
	fi

	echo ""
	echo "Выберите клиента которого Вы хотите разблокировать"
	tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
	if [[ "$NUMBEROFCLIENTS" == '1' ]]; then
		read -rp "Выберите одного клиента [1]: " CLIENTNUMBER
	else
		read -rp "Выберите одного клиента [1-$NUMBEROFCLIENTS]: " CLIENTNUMBER
	fi

	CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)
#разблокировать клиента
mv /etc/openvpn/ccd/$CLIENT"_disabled" /etc/openvpn/ccd/$CLIENT
#rm /etc/openvpn/ccd/$CLIENT"_disabled"
echo ""
	echo "Клиент $CLIENT разблокирован. Не забудь актуализировать права доступа "
}

function LogReports () {
clear
awk 'BEGIN { FS=" "; print "Пользователь\t\tНачало_сессии\t\tВнутренний_IP_VPN\t\tВнешний_IP_пользователя\t\tПродолжительность_сессии\t\tТрафик(up/down)\n--------------"; }
{printf "%-10s %27s %20s %40s %25s %38s\n",$1,$2,$3,$4,$5,$6 }
END { print "--------------\nFile Complete" }' /var/log/openvpn/remote.connect
#	nano "/var/log/openvpn/remote.connect"	
}

function revokeClient () {
	NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
	if [[ "$NUMBEROFCLIENTS" == '0' ]]; then
		echo ""
		echo "У Вас нет доступных клиентов!"
		exit 1
	fi

	echo ""
	echo "Выберите существующий сертификат клиента, который вы хотите отозвать"
	tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
	if [[ "$NUMBEROFCLIENTS" == '1' ]]; then
		read -rp "Выберите одного клиента [1]: " CLIENTNUMBER
	else
		read -rp "Выберите одного клиента [1-$NUMBEROFCLIENTS]: " CLIENTNUMBER
	fi

	CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)
	cd /etc/openvpn/easy-rsa/ || return
	./easyrsa --batch revoke "$CLIENT"
	EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
	# Cleanup
	rm -f "pki/reqs/$CLIENT.req"
	rm -f "pki/private/$CLIENT.key"
	rm -f "pki/issued/$CLIENT.crt"
	rm -f /etc/openvpn/crl.pem
	rm -f "/etc/openvpn/ccd/$CLIENT"
	cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
	chmod 644 /etc/openvpn/crl.pem
	find /home/ -maxdepth 2 -name "$CLIENT.ovpn" -delete
	rm -f "/root/$CLIENT.ovpn"
	sed -i "s|^$CLIENT,.*||" /etc/openvpn/ipp.txt

	echo ""
	echo "Сертификат клиента $CLIENT отозван."
}
function removeOpenVPN () {
	echo ""
	# shellcheck disable=SC2034
	read -rp "Вы действительно хотите удалить сервер OpenVPN? [y/n]: " -e -i n REMOVE
	if [[ "$REMOVE" == 'y' ]]; then
		# Get OpenVPN port from the configuration
		PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)

		# Stop OpenVPN
		elif [[ "$OS" == "ubuntu" ]] && [[ "$VERSION_ID" == "16.04" ]]; then
			systemctl disable openvpn
			systemctl stop openvpn
		else
			systemctl disable openvpn@server
			systemctl stop openvpn@server
			# Remove customised service
			rm /etc/systemd/system/openvpn\@.service
		fi

		# Remove the iptables rules related to the script
		systemctl stop iptables-openvpn
		# Cleanup
		systemctl disable iptables-openvpn
		rm /etc/systemd/system/iptables-openvpn.service
		systemctl daemon-reload
		rm /etc/iptables/add-openvpn-rules.sh
		rm /etc/iptables/rm-openvpn-rules.sh

		# SELinux
		if hash sestatus 2>/dev/null; then
			if sestatus | grep "Current mode" | grep -qs "enforcing"; then
				if [[ "$PORT" != '1194' ]]; then
					semanage port -d -t openvpn_port_t -p udp "$PORT"
				fi
			fi
		fi

		if [[ "$OS" =~ (debian|ubuntu) ]]; then
			apt-get autoremove --purge -y openvpn
			if [[ -e /etc/apt/sources.list.d/openvpn.list ]];then
				rm /etc/apt/sources.list.d/openvpn.list
				apt-get update
		fi
		
		# Cleanup
		find /home/ -maxdepth 2 -name "*.ovpn" -delete
		find /root/ -maxdepth 1 -name "*.ovpn" -delete
		rm -rf /etc/openvpn
		rm -rf /usr/share/doc/openvpn*
		rm -f /etc/sysctl.d/20-openvpn.conf
		rm -rf /var/log/openvpn
        rm /bin/ovs
		echo ""
		echo "Сервер OpenVPN удален!"
else
		echo ""
		echo "Удаление сервера OpenVPN прервано!"
	fi
}

function manageMenu () {
	clear
	echo "Добро пожаловать в установщик OpenVPN сервера!"
	echo "Оригинал установщика доступен по адресу: https://github.com/angristan/openvpn-install"
	echo ""
	echo "Похоже, OpenVPN сервер уже установлен."
	echo ""
	echo "Укажите, что Вы хотите сделать?"
	echo "   1) Добавить нового клиента"
	echo "   2) Добавить или удалить доступные подсети для существующего клиента"
    echo "   3) Сбросить сессию подключенного клиента"
    echo "   4) Заблокировать клиента"
    echo "   5) Разблокировать клиента"
    echo "   6) Посмотреть журнал активности клиентов"
	echo "   7) Отозвать сертификат существующего клиента"
	echo "   8) Удалить OpenVPN сервер"
	echo "   9) Выйти"
	until [[ "$MENU_OPTION" =~ ^[1-9]$ ]]; do
		read -rp "Сделайте выбор [1-9]: " MENU_OPTION
	done

	case $MENU_OPTION in
		1)
			newClient
		;;
		2)
			AddRemoveSubnetClient
		;;
        3)
			ResetClient
		;;
        4)
			BlockClient
		;;
		5)
			UnblockClient
		;;
		6)
        	LogReports
		;;
        7)
        	revokeClient
		;;
		8)
			removeOpenVPN
		;;
		9)
			exit 0
		;;
	esac
}

# Check for root, TUN, OS...
initialCheck

# Check if OpenVPN is already installed
if [[ -e /etc/openvpn/server.conf ]]; then
	manageMenu
else
	installOpenVPN
fi
